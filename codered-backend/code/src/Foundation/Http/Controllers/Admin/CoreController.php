<?php

namespace App\Foundation\Http\Controllers\Admin;

use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\View;
use App\Foundation\Traits\HasAuthorization;
use INTCore\OneARTFoundation\Http\Controller;
use Str;
use Constants;
use App\Foundation\Http\CoreHelpers\CoreEvents;

abstract class  CoreController extends Controller
{

    use CoreEvents;

    function __construct()
    {
        $this->request = request();

        if($this->auto_set_property == true) {
            $this->setCustomProperty();
        }

        $seachPlaceHolder = $this->searchColumn;

        $seachPlaceHolder = collect($seachPlaceHolder)->map(function($placeHolder) {
            return ucwords(str_replace('_', ' ', $placeHolder));
        })->toArray();

        $this->ifMethodExistCallIt('overrideAutoGeneratedValues');

        view()->share([
            'module_name'           => $this->module_name,
            'route'                 => $this->route,
            'view_path'             => $this->view_path,
            'domain'                => $this->domain,
            'isShowable'            => $this->isShowable,
            'crumbs'                => $this->breadcrumb,
            'page_title'            => end($this->breadcrumb)->title,
            'permitted_actions'     => $this->permitted_actions,
            'search_placeholder'    => implode(', ', $seachPlaceHolder),
        ]);
    }

    protected $request;
    protected $model;

    /************************************ Custom Property ************************************/

    protected $domain = null;

    /**
     * auto set module property
     * @var boolean
     */
    protected $auto_set_property = true;

    /**
     * Breadcrumb for view
     * @var array
     */
    protected $breadcrumb = [];

    /**
     * name of module which appear on view
     * @var string
     */
    protected $module_name;

    /**
     * Resource Route For Pagination
     * @var string
     */
    protected $route;

    /**
     * Path of view file
     * the Base id views/admin folder .
     * EX : if you have folder called user inside admin folder just add
     * user
     * @var string
     */
    protected $view_path;

    /**
     * array of columns to will select from query
     * @var array
     */
    protected $show_columns_select = [];

    /**
     * Main column is main column where use to title page on edit/show
     */

    protected $main_column;

    /**
     * show columns in index table
     */
    protected $select_columns = [];

    /**
     * show show button in actions column in table view
     */
    protected $isShowable = false;

    /**
     * permitted buttons
     */
    protected $permitted_actions = [
        'index'  => null,
        'create' => null,
        'edit'   => null,
        'show'   => null,
        'delete' => null,
    ];

    /************************************ Custom Property ************************************/


    /**
     * Number of Rows per page , if you need no limit you can make it 99999999999999999
     * @var integer
     */
    protected $perPage = 20;

    /**
     * Ordering ASC or DESC
     * @var array
     */
    protected $orderBy = ['created_at', 'desc'];

    /**
     * Column in database to search
     * @var array
     */
    protected $searchColumn = [];

    /**
     * Display a listing of the resource.
     *
     * @return View|JsonResponse
     */
    public function index()
    {
        $this->pushBreadcrumb(trans('lang.index'), null, true);

        $this->ifMethodExistCallIt('onIndex');
        $this->request->flash();
        $search = $this->request->search;

        $rows = $this->model;

        if(!is_null($this->orderBy)) {
            $rows = $rows->orderBy($this->orderBy[0], $this->orderBy[1]);
        }

        if(!empty($search)) {
            $rows->where(function ($rows) use( $search){

            foreach($this->searchColumn as $key => $column) {
                    if($key == 0) {
                        $rows = $rows->where($column, "LIKE", "%{$search}%");
                    } else {
                        $rows = $rows->orWhere($column, "LIKE", "%{$search}%");
                    }

            }
        });

        }

        if(method_exists($this, 'callbackQuery')) {
            $rows = $this->callbackQuery($rows);
        }

        $rows = $rows->paginate($this->perPage);

        if($this->request->ajax())
            return response()->json($this->view('loop', [
                'rows'           => $rows,
                'select_columns' => $this->select_columns,
            ])->render());


        return $this->view('index', [
            'rows'           => $rows,
            'select_columns' => $this->select_columns,
            'breadcrumb'     => $this->breadcrumb,
        ]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return Response|View
     */
    public function create()
    {
        $this->pushBreadcrumb(trans('lang.create'), null, true);
        $this->ifMethodExistCallIt('onCreate');
        return $this->view('create', [
            'breadcrumb' => $this->breadcrumb
        ]);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return Response|Voild
     */
    public function store()
    {
        $this->ifMethodExistCallIt('onStore');
        $insert = $this->model->create($this->request->all());
        $this->ifMethodExistCallIt('isStored', $insert);
        return $this->returnMessage($insert, 1);
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     * @return Response|View
     */
    public function show($id)
    {
        $this->ifMethodExistCallIt('onShow');
        $main_column = $this->main_column;
        $row = $this->model->findOrFail($id);
        $this->pushBreadcrumb($row->$main_column, null, false);
        $this->ifMethodExistCallIt('isShowed', $row);

        return $this->view('show', [
            'row'        => $row,
            'breadcrumb' => $this->breadcrumb,
        ]);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     * @return View
     */
    public function edit($id)
    {
        $this->ifMethodExistCallIt('onEdit');
        $row = $this->model->findOrFail($id);
        $main_column = $this->main_column;

        $this->pushBreadcrumb($row->$main_column, null, false);
        $this->pushBreadcrumb(trans('lang.edit'));

        return $this->view('edit', [
            'row'        => $row,
            'breadcrumb' => $this->breadcrumb
        ]);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     * @return Response|Voild
     */
    public function update($id)
    {
        $this->ifMethodExistCallIt('onUpdate');
        $row = $this->model->find($id);
        $update = $row->update($this->request->all());
        $this->ifMethodExistCallIt('isUpdated', $row);
        return $this->returnMessage($update, 2);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     * @return Response|Voild
     */
    public function destroy($id)
    {
        $id = $id ? $id : $this->request->id;
        $row = $this->model->find($id);
        $this->ifMethodExistCallIt('onDestroy', $row);
        $delete = $row->delete();
        $this->ifMethodExistCallIt('isDestroyed', $row);
        return $this->returnMessage($delete, 3);
    }

    /****************************** Initialization Methods *************************************/

    /**
     * return message depend on check operation
     * @param boolean $model true return success message, false return failed
     * @param int $type 1=> Store , 2=> Update , 3=> Destroy
     * @param array $custom_message ['success'=>'message','failed'=>'message']
     * @return Voild|JsonResponse
     */
    protected function returnMessage($model, $type, $custom_message = [])
    {
        if($model) {
            if($this->request->ajax())
                return response()->json([
                    'status'  => 'true',
                    'message' => $this->successMessage($type, @$custom_message['success']),
                    'model' => $model
                ]);

            return redirect("$this->route")->with('success', $this->successMessage($type, @$custom_message['success']));
        } else {
            if($this->request->ajax())
                return response()->json([
                    'status'  => 'false',
                    'message' => $this->failedMessage($type, @$custom_message['failed']),
                    'error' => $model
                ]);

            return redirect("$this->route")->with('failed', $this->failedMessage($type, @$custom_message['failed']));
        }
    }

    /**
     * return success message depend on type
     * @param string $type [description]
     * @return [type]       [description]
     */
    protected function successMessage($type = '', $custom_message)
    {
        if(!empty($custom_message))
            return $custom_message;

        switch($type) {
            case 1:
                return trans("lang.created_successful_message");
                break;

            case 2:
                return trans("lang.updated_successful_message");
                break;

            case 3:
                return trans("lang.deleted_successful_message");
                break;

            default:
                return trans("lang.saved_successful_message");
                break;
        }
    }

    /**
     * return failed message depend on type
     * @param string $type [description]
     * @return [type]       [description]
     */
    protected function failedMessage($type = '', $custom_message)
    {
        if(!empty($custom_message))
            return $custom_message;

        switch($type) {
            case 1:
                return trans("lang.created_failed");
                break;

            case 2:
                return trans("lang.updated_failed");
                break;

            case 3:
                return trans("lang.deleted_failed");
                break;
            default:
                return trans("Error");
                break;
        }
    }

    /**
     * Return view function from the Base Folder $view_path
     * @param String $view Filename
     * @param array $variable Pass Variable to View
     * @return View
     */
    protected function view(string $view, array $variable = [])
    {
        return view("{$this->view_path}.{$view}", $variable);
    }

    protected function setCustomProperty()
    {
        # generate class's breadcrumb
        $class_breadcrumb = $this->getControllerClassName();

        $route = $this->createRoute($class_breadcrumb);

        $this->createModuleName($class_breadcrumb);
        $this->createViewPath($route);
        $this->setBaseBreadcrumb($class_breadcrumb);

        $this->main_column = $this->model->getFillable() ? $this->model->getFillable()[0] : 'id';
        $this->searchColumn = $this->searchColumn ? $this->searchColumn : [$this->main_column];
        $this->show_columns_select = $this->show_columns_select ? $this->show_columns_select : [$this->main_column];

    }

    public function returnModuleNameSpliteWthDashes($class_breadcrumb)
    {
        $class_name = end($class_breadcrumb);

        $name = str_replace('Controller', '', $class_name);

        return $this->convertToLowerCase($name);
    }

    public function createModuleName($class_breadcrumb)
    {
        $moduleToLower = $this->returnModuleNameSpliteWthDashes($class_breadcrumb);

        $getModuleName = str_replace('-', ' ', ucwords($moduleToLower, '-'));

        $this->module_name = trans("{$this->domain}::lang." . $this->convertToPluralWord($getModuleName));
    }

    public function createViewPath($route)
    {
        $route = str_replace('/', '.', $route); // convert slashes '/' to dot '.'

        $module_view = "{$this->domain}::{$route}";
        return $this->view_path = $module_view;
    }

    public function createRoute($class_breadcrumb)
    {
        $moduleToLower = $this->returnModuleNameSpliteWthDashes($class_breadcrumb);
        $route = Constants::ADMIN_BASE_URL . '/' . $moduleToLower;
        return $this->route = $route;
    }

    /**
     * Generate route for current controller
     * @return string
     */
    //    private function createRoute()
    //    {
    //        dd($this->request->route()->getName());
    //        return $this->route = $this->request->route()->compiled->getStaticPrefix();
    //    }


    /**
     * convert word to plural to show model name in frontend
     * @param String $string
     * @return String
     */
    public function convertToPluralWord($string)
    {
        return Str::plural($string);
    }

    /**
     * Generate Breadcrumb refer to class breadcrumb and view
     * @return array
     */
    public function getControllerClassName()
    {
        # get namespace of CoreController
        # App\Http\Controllers\Admin\CoreController .. will return Admin
        $currentNamespace = explode('\\', __NAMESPACE__);
        $currentNamespace = array_pop($currentNamespace);

        # get namespace of called class
        $namespaces = explode('\\', get_called_class());
        $boolean = false;
        $module_breadcrumb = [];
        foreach($namespaces as $key => $namespace) {
            if($boolean)
                $module_breadcrumb[] = $namespace;
            else
                $boolean = $namespace == $currentNamespace;
        }
        return $module_breadcrumb;
    }

    protected function setBaseBreadcrumb(array $class_breadcrumb = [])
    {
        $this->pushBreadcrumb($this->module_name, $this->route);
    }

    /**
     * create breadcrumb
     * @param string $title
     * @param string $url
     * @param bool $active
     * @return void [type]      [description]
     */
    protected function pushBreadcrumb(?string $title, string $url = null, bool $active = true)
    {
        $crumb = new \stdClass();
        $crumb->title = $title;
        $crumb->url = $url;
        $crumb->active = $active;

        array_push($this->breadcrumb, $crumb);
    }

    /**
     * Convert $string to lower case
     * @param String $string
     * @return String
     */
    protected function convertToLowerCase($string)
    {
        return strtolower(preg_replace('/\B([A-Z])/', '-$1', $string));
    }

    /**
     * used for launch custom events like :
     * onStore,isStored
     * onUpdate,isUpdated
     * @param string $method
     * @param mixed $args [pass paramter to function]
     */
    public function ifMethodExistCallIt(string $method, $args = [])
    {
        if(method_exists($this, $method)) {
            $this->$method($args);
        }
    }

}

